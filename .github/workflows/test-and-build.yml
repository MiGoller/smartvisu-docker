name: Test and build on push and PRs

on:
  push:
    branches:
      - "*"

    # Igore these files
    paths-ignore:
      - '**/README.md'
      - 'example/**'
      - 'LICENSE'

  # Run tests for any PRs against main
  pull_request:
    branches:
      - main
      - develop
  
  workflow_dispatch:
  
env:
  IMAGE_NAME: "smartvisu"
  SMARTVISU_REF_MAIN: "refs/heads/master"
  SMARTVISU_PHP_VERSION: "7"

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && (github.base_ref == 'refs/heads/main' || github.base_ref == 'refs/heads/develop'))
        || (github.event_name == 'push')
    steps:
      - uses: actions/checkout@v2

      - name: Download smartVISU
        id: download_smartvisu_test
        run: |
          mkdir src
          curl -L https://github.com/Martin-Gleiss/smartvisu/archive/${{ env.SMARTVISU_REF_MAIN }}.tar.gz | tar -xz --strip-components=1 -C ./src

      - name: Get smartVISU version information
        id: version_information
        run: |
          APP_VERSION=$( cat ./src/version-info.php | grep \'config_version\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_MAJOR=$( cat ./src/version-info.php | grep \'config_version_major\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_MINOR=$( cat ./src/version-info.php | grep \'config_version_minor\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_REVISION=$( cat ./src/version-info.php | grep \'config_version_revision\' | awk '{split($0,a,"'\''"); print a[4]}' )

          if [[ -z "${APP_VERSION}" ]]; then
            [[ -z "${APP_VERSION_MAJOR}" ]] && APP_VERSION_MAJOR="0"
            [[ -z "${APP_VERSION_MINOR}" ]] && APP_VERSION_MINOR="0"
            [[ -z "${APP_VERSION_REVISION}" ]] && APP_VERSION_REVISION="0"
            MY_VERSION=( $APP_VERSION_MAJOR $APP_VERSION_MINOR $APP_VERSION_REVISION )
          else
            MY_VERSION=( ${APP_VERSION//./ } )
          fi

          [ ${#MY_VERSION[@]} == 1 ] && MY_VERSION[1]="0"
          [ ${#MY_VERSION[@]} == 2 ] && MY_VERSION[2]="0"

          APP_VERSION="${MY_VERSION[0]}.${MY_VERSION[1]}.${MY_VERSION[2]}"

          echo ::set-output name=APP_VERSION::${APP_VERSION}
          echo ::set-output name=APP_VERSION_MAJOR::${APP_VERSION_MAJOR}
          echo ::set-output name=APP_VERSION_MINOR::${APP_VERSION_MINOR}
          echo ::set-output name=APP_VERSION_REVISION::${APP_VERSION_REVISION}
          
          echo "smartVISU version: ${APP_VERSION}"

      - name: Run Docker compose tests
        id: compose_test
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build --build-arg ARG_APP_VERSION=${{ steps.version_information.outputs.APP_VERSION }} --build-arg ARG_PHP_VERSION=${{ env.SMARTVISU_PHP_VERSION }}
            docker-compose --file docker-compose.test.yml run sut
          fi
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build test
        id: docker_build_test
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          build-args: |
            ARG_APP_VERSION=${{ steps.version_information.outputs.APP_VERSION }}
            ARG_PHP_VERSION=${{ env.SMARTVISU_PHP_VERSION }}

  build_and_release:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
        || (github.event_name == 'pull_request' && (github.base_ref == 'refs/heads/main' || github.base_ref == 'refs/heads/develop'))

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: (github.ref == 'refs/heads/main') || (github.base_ref == 'refs/heads/main')
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Download smartVISU
        id: download_smartvisu
        run: |
          mkdir src
          curl -L https://github.com/Martin-Gleiss/smartvisu/archive/${{ env.SMARTVISU_REF_MAIN }}.tar.gz | tar -xz --strip-components=1 -C ./src

      - name: Get smartVISU version information
        id: version_information
        run: |
          APP_VERSION=$( cat ./src/version-info.php | grep \'config_version\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_MAJOR=$( cat ./src/version-info.php | grep \'config_version_major\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_MINOR=$( cat ./src/version-info.php | grep \'config_version_minor\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_REVISION=$( cat ./src/version-info.php | grep \'config_version_revision\' | awk '{split($0,a,"'\''"); print a[4]}' )
          # cat ./src/version-info.php

          if [[ -z "${APP_VERSION}" ]]; then
            [[ -z "${APP_VERSION_MAJOR}" ]] && APP_VERSION_MAJOR="0"
            [[ -z "${APP_VERSION_MINOR}" ]] && APP_VERSION_MINOR="0"
            [[ -z "${APP_VERSION_REVISION}" ]] && APP_VERSION_REVISION="0"
            MY_VERSION=( $APP_VERSION_MAJOR $APP_VERSION_MINOR $APP_VERSION_REVISION )
          else
            MY_VERSION=( ${APP_VERSION//./ } )
          fi

          [ ${#MY_VERSION[@]} == 1 ] && MY_VERSION[1]="0"
          [ ${#MY_VERSION[@]} == 2 ] && MY_VERSION[2]="0"

          APP_VERSION="${MY_VERSION[0]}.${MY_VERSION[1]}.${MY_VERSION[2]}"

          echo ::set-output name=APP_VERSION::${APP_VERSION}
          echo ::set-output name=APP_VERSION_MAJOR::${APP_VERSION_MAJOR}
          echo ::set-output name=APP_VERSION_MINOR::${APP_VERSION_MINOR}
          echo ::set-output name=APP_VERSION_REVISION::${APP_VERSION_REVISION}
          
          echo "smartVISU version: ${APP_VERSION}"

      - name: Get Docker image information
        id: image_information
        run: |
          IMAGE_ID=${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo "${IMAGE_ID}" | tr '[A-Z]' '[a-z]')

          # # Strip git ref prefix from version
          # VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Get version from previous step
          VERSION=${{ steps.version_information.outputs.APP_VERSION }}

          # Use Docker `latest` and `development` tag convention
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            [ "${{ github.base_ref }}" == "refs/heads/main" ] && VERSION=latest
            [ "${{ github.base_ref }}" == "refs/heads/develop" ] && VERSION=develop
          fi

          if [ "${{ github.event_name }}" == "push" ]; then
            [ "${{ github.ref }}" == "refs/heads/main" ] && VERSION=latest
            [ "${{ github.ref }}" == "refs/heads/develop" ] && VERSION=develop
          fi

          echo "Image name and tag: ${IMAGE_ID}:${VERSION}"
          echo ::set-output name=IMAGE_ID::${IMAGE_ID}
          echo ::set-output name=IMAGE_REF::${VERSION}

      - name: Build and push multi-arch Docker images for branch develop
        id: multi-arch_docker_build_develop
        if: (github.ref == 'refs/heads/develop') || (github.base_ref == 'refs/heads/develop')
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          build-args: |
            ARG_APP_VERSION=${{ steps.version_information.outputs.APP_VERSION }}
            ARG_PHP_VERSION=${{ env.SMARTVISU_PHP_VERSION }}
          tags: |
            ghcr.io/${{ steps.image_information.outputs.IMAGE_ID }}:${{ steps.image_information.outputs.IMAGE_REF }}

      - name: Build and push multi-arch Docker images for branch main
        id: multi-arch_docker_build
        if: (github.ref == 'refs/heads/main') || (github.base_ref == 'refs/heads/main')
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          build-args: |
            ARG_APP_VERSION=${{ steps.version_information.outputs.APP_VERSION }}
            ARG_PHP_VERSION=${{ env.SMARTVISU_PHP_VERSION }}
          tags: |
            ${{ steps.image_information.outputs.IMAGE_ID }}:${{ steps.image_information.outputs.IMAGE_REF }}
            ghcr.io/${{ steps.image_information.outputs.IMAGE_ID }}:${{ steps.image_information.outputs.IMAGE_REF }}
