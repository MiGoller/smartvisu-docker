name: Test and build on push and PRs

on:
  push:
    branches:
      - "*"

    # Igore these files
    paths-ignore:
      - '**/README.md'
      - 'example/**'
      - 'LICENSE'

  # Run tests for any PRs.
  pull_request:
    branches:
      - main
  
  workflow_dispatch:
  
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: "smartvisu"
  SMARTVISU_REF_MAIN: "refs/heads/master"

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    if: contains('pull_request', github.event_name)
        || (github.event_name == 'push' && github.ref != 'refs/heads/main')
    steps:
      - uses: actions/checkout@v2

      - name: Download smartVISU
        run: |
          mkdir src
          curl -L https://github.com/Martin-Gleiss/smartvisu/archive/${{ env.SMARTVISU_REF_MAIN }}.tar.gz | tar -xz --strip-components=1 -C ./src
          # if [ -f docker-compose.test.yml ]; then
          #   docker-compose --file docker-compose.test.yml build
          #   docker-compose --file docker-compose.test.yml run sut
          # else
          #   docker build . --file Dockerfile
          # fi

      - name: Version_Information
        run: |
          # ls ./src -al
          APP_VERSION=$( cat ./src/version-info.php | grep \'config_version\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_MAJOR=$( cat ./src/version-info.php | grep \'config_version_major\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_MINOR=$( cat ./src/version-info.php | grep \'config_version_minor\' | awk '{split($0,a,"'\''"); print a[4]}' )
          APP_VERSION_REVISION=$( cat ./src/version-info.php | grep \'config_version_revision\' | awk '{split($0,a,"'\''"); print a[4]}' )
          # cat ./src/version-info.php

          if [[ -z "${APP_VERSION}" ]]; then
            [[ -z "${APP_VERSION_MAJOR}" ]] && APP_VERSION_MAJOR="0"
            [[ -z "${APP_VERSION_MINOR}" ]] && APP_VERSION_MINOR="0"
            [[ -z "${APP_VERSION_REVISION}" ]] && APP_VERSION_REVISION="0"
            MY_VERSION=( $APP_VERSION_MAJOR $APP_VERSION_MINOR $APP_VERSION_REVISION )
          else
            MY_VERSION=( ${APP_VERSION//./ } )
          fi

          [ ${#MY_VERSION[@]} == 1 ] && MY_VERSION[1]="0"
          [ ${#MY_VERSION[@]} == 2 ] && MY_VERSION[2]="0"

          # echo ${MY_VERSION[*]}
          # echo "${MY_VERSION[0]}.${MY_VERSION[1]}.${MY_VERSION[2]}"
          APP_VERSION="${MY_VERSION[0]}.${MY_VERSION[1]}.${MY_VERSION[2]}"

          echo ::set-output name=APP_VERSION::${APP_VERSION}
          echo ::set-output name=APP_VERSION_MAJOR::${APP_VERSION_MAJOR}
          echo ::set-output name=APP_VERSION_MINOR::${APP_VERSION_MINOR}
          echo ::set-output name=APP_VERSION_REVISION::${APP_VERSION_REVISION}
          
          echo "${APP_VERSION}"

      - name: Run build tests
        run: |
          mkdir src
          curl -L https://github.com/Martin-Gleiss/smartvisu/archive/${{ env.SMARTVISU_REF_MAIN }}.tar.gz | tar -xz --strip-components=1 -C ./src
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile --build-arg ARG_APP_VERSION=${{ steps.Version_Information.outputs.APP_VERSION }}
          fi

  # multi:
  #   # Ensure test job passes before pushing image.
  #   needs: test

  #   runs-on: ubuntu-latest
  #   if: (github.event_name == 'push' && github.ref == 'refs/heads/develop')
  #       || (github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main')
  #       || github.event_name == 'schedule'

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1 
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.CR_PAT }}

  #     - name: Get version information
  #       id: image_information
  #       run: |
  #         IMAGE_ID=${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest
  #         echo ::set-output name=IMAGE_ID::${IMAGE_ID}
  #         echo ::set-output name=IMAGE_REF::${VERSION}
  #     - name: Build and push Docker image
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         # build-args: |
  #         #   BLA={{ env.BLA }}
  #         tags: |
  #           ${{ steps.image_information.outputs.IMAGE_ID }}:${{ steps.image_information.outputs.IMAGE_REF }}
  #           ghcr.io/${{ steps.image_information.outputs.IMAGE_ID }}:${{ steps.image_information.outputs.IMAGE_REF }}